import 'dart:convert';

import 'package:oho_works_app/api_calls/calls.dart';
import 'package:oho_works_app/components/customcard.dart';
import 'package:oho_works_app/components/app_buttons.dart';
import 'package:oho_works_app/components/appAvatar.dart';
import 'package:oho_works_app/enums/create_deeplink.dart';
import 'package:oho_works_app/enums/member%20enums.dart';
import 'package:oho_works_app/enums/resolutionenums.dart';
import 'package:oho_works_app/enums/serviceTypeEnums.dart';
import 'package:oho_works_app/enums/share_item_type.dart';
import 'package:oho_works_app/home/locator.dart';
import 'package:oho_works_app/models/Rooms/createroom.dart';
import 'package:oho_works_app/models/Rooms/createroomresponse.dart';
import 'package:oho_works_app/models/Rooms/memberAdd.dart';
import 'package:oho_works_app/models/Rooms/membershipupdaterolestatus.dart';
import 'package:oho_works_app/models/Rooms/roomlistmodels.dart';
import 'package:oho_works_app/models/dynmaicres.dart';
import 'package:oho_works_app/models/rooms_details_data.dart';
import 'package:oho_works_app/services/get_deeplink_url_service.dart';
import 'package:oho_works_app/ui/RoomModule/roommembersPage.dart';
import 'package:oho_works_app/ui/dialogs/exitRoomConfirmtionDilaog.dart';
import 'package:oho_works_app/ui/selectmemberPage.dart';
import 'package:oho_works_app/utils/TextStyles/TextStyleElements.dart';
import 'package:oho_works_app/utils/app_localization.dart';
import 'package:oho_works_app/utils/colors.dart';
import 'package:oho_works_app/utils/config.dart';
import 'package:oho_works_app/utils/hexColors.dart';
import 'package:oho_works_app/utils/strings.dart';
import 'package:oho_works_app/utils/toast_builder.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'createRoomPage.dart';

// ignore: must_be_immutable
class RoomAboutPage extends StatefulWidget {
  RoomListItem? value;
  int? id;
  int? instituteId;
  int? ownerId;
  String? userType;
  String? ownerType;
  String? nameOfRoom;

  RoomAboutPage(this.value, this.ownerId, this.ownerType, this.userType, this.instituteId, this.id, this.nameOfRoom);

  @override
  _RoomAboutPage createState() => _RoomAboutPage(
      value, ownerId, ownerType, userType, instituteId, id, nameOfRoom);
}

class _RoomAboutPage extends State<RoomAboutPage> {
  RoomListItem? value;
  late SharedPreferences prefs;
  int? id;
  int? instituteId;
  int? ownerId;
  String? nameOfRoom;
  String? userType;
  String? ownerType;
  late BuildContext sctx;
  _RoomAboutPage(this.value, this.ownerId, this.ownerType, this.userType,
      this.instituteId, this.id, this.nameOfRoom);

  bool isMute = false;

  @override
  void initState() {
    if (ownerId == null) {
      getRoomsDetails();
    }
    super.initState();
  }

  void setSharedPreferences() async {
    prefs = await SharedPreferences.getInstance();
    setState(() {
      ownerId ??= prefs.getInt("userId");
      instituteId ??= prefs.getInt(Strings.instituteId);
      ownerType ??= prefs.getString("ownerType");
    });
  }

  Widget getTitle(RoomListItem item) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [


      ],
    );
  }

  void exitRoom() {
    MembershipRoleStatusPayload payload = MembershipRoleStatusPayload();
    payload.roomId = value!.id;
    payload.memberId = prefs.getInt(Strings.userId);
    payload.memberType = "person";
    payload.action = MEMBERSHIP_ROLE.remove.type;
    var body = jsonEncode(payload);
    Calls().call(body, context, Config.MEMBERSHIP_STATUS_UPDATE).then((value) {
      var res = DynamicResponse.fromJson(value);
      if (res.statusCode == Strings.success_code) {
        ToastBuilder()
            .showToast("success", context, HexColor(AppColors.information));
        Navigator.pop(context);
      } else {
        ToastBuilder()
            .showToast(res.message!, context, HexColor(AppColors.information));
      }
    }).catchError((onError) {
      print(onError);
    });
  }

  bool _isVisible() {
    return value != null && value!.memberRoleType == 'A';
  }

  bool _isEditButtonVisible() {
    if(value!.isAutoGeneratedRoom!=null && value!.isAutoGeneratedRoom!)
      return false;
    else
      return value != null && value!.membershipStatus != MEMBERSHIP_STATUS.ACTIVE.type;
  }
  late TextStyleElements styleElements;

  @override
  Widget build(BuildContext context) {
    styleElements = TextStyleElements(context);
    setSharedPreferences();
    return ListView(
                children: [
                  appListCard(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          crossAxisAlignment: CrossAxisAlignment.center,
                            children: [
                              Padding(
                                padding: EdgeInsets.only(left: 8,top: 4),
                                child: appAvatar(
                                  size: 56,
                                  service_type: SERVICE_TYPE.ROOM,
                                  resolution_type: RESOLUTION_TYPE.R256,
                                  imageUrl:value!.roomProfileImageUrl,),
                              ),
                              Expanded(
                                  child: Padding(
                                      padding: EdgeInsets.only(left: 8,right:8),
                                      child: RichText(
                                        maxLines: 2,
                                        overflow: TextOverflow.ellipsis,
                                        text: TextSpan(
                                          // ignore: deprecated_member_use
                                          style: Theme.of(context).textTheme.body1,
                                          children: [
                                            TextSpan(
                                              text: value != null ? value!.roomName : nameOfRoom,
                                              style: styleElements.subtitle1ThemeScalable(context),
                                            ),
                                            WidgetSpan(
                                              child: Visibility(
                                                visible: value!.isPrivate ?? false,
                                                child: Padding(
                                                  padding: const EdgeInsets.only(right: 8.0),
                                                  child: Icon(
                                                    Icons.lock,
                                                    size: 14,
                                                    color: HexColor(AppColors.appColorGrey500),
                                                  ),
                                                ),
                                              ),
                                            ),
                                          ],
                                        ),
                                      )

                                    /*  Text(
              item!=null? item.roomName:nameOfRoom,
              maxLines: 3,
              overflow: TextOverflow.ellipsis,
              style: styleElements.subtitle1ThemeScalable(context),
            ),*/
                                  ) /*Row(
            children: [   Flexible(
              child: Padding(
                padding: EdgeInsets.only(top: 8),
                child: Text(
                  item!=null? item.roomName:nameOfRoom,
                  maxLines: 3,
                  overflow: TextOverflow.ellipsis,
                  style: styleElements.headline6ThemeScalable(context),
                ),
              ),
            ),
              Visibility(
                visible: item!=null?item.isPrivate:false,
                child: Icon(
                  Icons.lock,
                  color: HexColor(AppColors.appColorBlack65),
                  size: 14,
                ),
              ),],
          ),*/
                              ),
                              Visibility(
                                visible: _isEditButtonVisible(),
                                child: Align(
                                    alignment: Alignment.topRight,
                                    child: appTextButton(
                                      onPressed: () {
                                        if (value != null &&
                                            value!.membershipStatus ==
                                                MEMBERSHIP_STATUS.ACTIVE.type) {
                                          Navigator.push(
                                              context,
                                              MaterialPageRoute(
                                                  builder: (context) => CreateRoomPage(
                                                      value: value,
                                                      isEdit: true,
                                                      callback: () {}))).then((value) {});
                                        } else {
                                          joinRoom();
                                        }
                                      },
                                      child: Text(value != null
                                          ? value!.membershipStatus == MEMBERSHIP_STATUS.ACTIVE.type
                                          ? AppLocalizations.of(context)!.translate('edit')
                                          : AppLocalizations.of(context)!.translate('join')
                                          : AppLocalizations.of(context)!.translate('join'),
                                      style: styleElements.captionThemeScalable(context).copyWith(
                                        color:  HexColor(AppColors.appMainColor),
                                      ),),
                                    )),
                              )
                              // Padding(
                              //     padding: const EdgeInsets.all(8.0),
                              //     child: getTitle(value)),
                            ],
                          ),
                        Padding(
                          padding: const EdgeInsets.all(12.0),
                          child: Text(
                              (value != null &&
                                  value!.roomDescription != null)
                                  ? value!.roomDescription!
                                  : "",
                              style: styleElements
                                  .subtitle2ThemeScalable(context)),
                        )
                      ],
                    ),
                  ),
                  Visibility(
                    visible: value != null &&
                        value!.membershipStatus ==
                            MEMBERSHIP_STATUS.ACTIVE.type,
                    child: appListCard(
                      child: Column(
                        children: [
                          InkWell(
                            onTap: () {
                              Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                      builder: (context) =>
                                          RoomMembersPage(
                                              value!.id,
                                              value!.memberRoleType,
                                              ownerId,
                                              ownerType,
                                              userType,
                                              instituteId,
                                              id)));
                            },
                            child: ListTile(
                              leading: Icon(
                                Icons.person_outline,
                                color: HexColor(AppColors.appColorBlack65),
                              ),
                              title: Text(AppLocalizations.of(context)!.translate('member_list'),
                                style: styleElements
                                    .subtitle1ThemeScalable(context),
                              ),
                            ),
                          ),
                          Visibility(
                            visible: _isVisible(),
                            child: InkWell(
                              onTap: () {
                                Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                        builder: (context) =>
                                            SelectMembersPage(
                                                roomId: value!.id,
                                                selectedRoomType:
                                                    value!.roomType,
                                                callback: null)));
                              },
                              child: ListTile(
                                leading: Icon(Icons.person_add_outlined,
                                    color: HexColor(AppColors.appColorBlack65)),
                                title: Text(AppLocalizations.of(context)!.translate('add_members'),
                                  style: styleElements
                                      .subtitle1ThemeScalable(context),
                                ),
                              ),
                            ),
                          ),
                          Visibility(
                            visible: true,
                            child: InkWell(
                              onTap: () {
                                _onShare(value!.id);
                                /*Navigator.push(
                                context,
                                MaterialPageRoute(
                                    builder: (context) => InviteMembersPage()));*/
                              },
                              child: ListTile(
                                leading: Icon(Icons.share_outlined,
                                    color: HexColor(AppColors.appColorBlack65)),
                                title: Text(AppLocalizations.of(context)!.translate('invite_through_link'),
                                  style: styleElements
                                      .subtitle1ThemeScalable(context),
                                ),
                              ),
                            ),
                          ),
                          Visibility(
                            visible: false,
                            child: ListTile(
                              leading: Icon(
                                  Icons.notifications_active_outlined,
                                  color: HexColor(AppColors.appColorBlack65)),
                              title: Text(AppLocalizations.of(context)!.translate('mute_notification'),
                                style: styleElements
                                    .subtitle1ThemeScalable(context),
                              ),
                              trailing: Padding(
                                padding: EdgeInsets.only(right: 0),
                                child: Switch(
                                  value: isMute,
                                  onChanged: (value) {
                                    setState(() {
                                      isMute = value;
                                    });
                                  },
                                ),
                              ),
                            ),
                          ),
                          Visibility(
                            visible: _isVisible(),
                            child: InkWell(
                              onTap: () {
                                archiveRoom();
                              },
                              child: ListTile(
                                leading: Icon(Icons.archive_outlined,
                                    color: HexColor(AppColors.appColorBlack65)),
                                title: Padding(
                                  padding: const EdgeInsets.only(
                                      top: 4.0, bottom: 4.0, right: 4.0),
                                  child: Text(AppLocalizations.of(context)!.translate('archive_room'),
                                    style: styleElements
                                        .subtitle1ThemeScalable(context),
                                  ),
                                ),
                                subtitle: Padding(
                                  padding: const EdgeInsets.only(
                                      top: 4.0, bottom: 4.0, right: 4.0),
                                  child: Text(AppLocalizations.of(context)!.translate('archive_room_des'),
                                    style: styleElements
                                        .captionThemeScalable(context),
                                  ),
                                ),
                              ),
                            ),
                          ),
                          Visibility(
                            visible: ownerId == id,
                            child: InkWell(
                              onTap: () {
                                showDialog(
                                    context: context,
                                    builder: (BuildContext context) =>
                                        ExitConfirmationDialog(
                                            callback: (isSuccess) {
                                          if (isSuccess) {
                                            exitRoom();
                                          }
                                        }));
                              },
                              child: ListTile(
                                leading: Icon(Icons.exit_to_app,
                                    color: HexColor(AppColors.appColorBlack65)),
                                title: Padding(
                                  padding: const EdgeInsets.only(
                                      top: 4.0, bottom: 4.0, right: 4.0),
                                  child: Text(AppLocalizations.of(context)!.translate('exit_room'),
                                    style: styleElements
                                        .subtitle1ThemeScalable(context),
                                  ),
                                ),
                                subtitle: Padding(
                                  padding: const EdgeInsets.only(
                                      top: 4.0, bottom: 4.0, right: 4.0),
                                  child: Text(AppLocalizations.of(context)!.translate('cannot_exit_room'),
                                    style: styleElements
                                        .captionThemeScalable(context),
                                  ),
                                ),
                              ),
                            ),
                          )
                        ],
                      ),
                    ),
                  )
                ],
              );
  }

  void joinRoom() {
    MemberAddPayload payload = MemberAddPayload();
    payload.roomId = value!.id;
    payload.roomInstitutionId = prefs.getInt(Strings.instituteId);
    payload.isAddAllMembers = false;
    List<MembersItem> list = [];
    MembersItem item = MembersItem();
    item.memberType = 'person';
    item.memberId = prefs.getInt(Strings.userId);
    item.addMethod = MEMBER_ADD_METHOD.JOIN.type;
    list.add(item);
    payload.members = list;
    var data = jsonEncode(payload);
    Calls().call(data, context, Config.MEMBER_ADD).then((value) {
      var res = DynamicResponse.fromJson(value);
      if (res.statusCode == Strings.success_code) {
        ToastBuilder().showToast(
            "successfully joined", context, HexColor(AppColors.information));
        setState(() {
          this.value!.membershipStatus = MEMBERSHIP_STATUS.ACTIVE.type;
        });
      } else {
        ToastBuilder()
            .showToast(res.message!, context, HexColor(AppColors.information));
      }
    }).catchError((onError) {
      print(onError);
    });
  }

  void archiveRoom() async {
    CreateRoomPayload payload = CreateRoomPayload();
    payload.isPrivate = value!.isPrivate ;
    payload.isSharable = value!.isSharable;
    payload.roomType = value!.roomType;
    payload.roomStatus = "I";
    payload.roomDescription = value!.roomDescription;
    payload.roomName = value!.roomName;
    payload.roomOwnerTypeId = value!.roomInstitutionId;
    payload.roomCreatedById = value!.roomCreatedById;
    payload.roomOwnerType = value!.roomOwnerType;
    payload.roomCreatedByType = value!.roomCreatedByType;
    payload.institutionId = value!.roomInstitutionId;
    payload.id = value!.id;
    payload.roomPrivacyType = value!.roomPrivacyType;
    payload.roomTopics = value!.roomTopics;
    var body = jsonEncode(payload);
    Calls().call(body, context, Config.UPDATEROOM).then((value) {
      var res = CreateRoomResponse.fromJson(value);
      if (res.statusCode == Strings.success_code) {
        ToastBuilder().showToast(
            "Successfully Archived", context, HexColor(AppColors.information));
        Navigator.pop(context, Strings.success_code);
      } else {
        if (res.message != null && res.statusCode == Strings.info_code)
          ToastBuilder()
              .showSnackBar(res.message!, sctx, HexColor(AppColors.information));
      }
    }).catchError((onError) {
      print(onError);
    });
  }

  final CreateDeeplink? createDeeplink = locator<CreateDeeplink>();

  void _onShare(int? id) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    createDeeplink!.getDeeplink(
        SHAREITEMTYPE.DETAIL.type,
        prefs.getInt("userId").toString(),
        id,
        DEEPLINKTYPE.ROOMS.type,
        context);
  }

  void getRoomsDetails() async {
    final body = jsonEncode({
      "id": id,
    });

    Calls().call(body, context, Config.ROOM_DETAILS).then((v) {
      var res = RoomsDetailData.fromJson(v);
      if (res.statusCode == Strings.success_code) {
        if (res.rows != null) {
          setState(() {
            value = res.rows;
          });
        }
      } else {}
    }).catchError((onError) {
      print(onError);
    });
  }
}
